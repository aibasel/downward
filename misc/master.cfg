# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave

try:
    from secret_passwords import passwords
except ImportError:
    raise SystemExit("Fatal error: Is secret_passwords.py missing?\n"
                     "See code comments.")

## secret_passwords.py is a file that should not be committed to the repository
## and should look like this:
## passwords = {
##    "bot1": "password-of-bot1",
##    "bot2": "password-of-bot2",
##    ...
##    }

c['slaves'] = [
    BuildSlave("bot-erez", passwords["bot-erez"]),
    ]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes

# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Nightly
# Runs a quick build immediately after change
quick_s = Scheduler(
    name="quick",
    branch="default",
    treeStableTimer=0,
    builderNames=["quick-build"])

# Runs a full build 5 minutes after change
full_s = Scheduler(
    name="full",
    branch="default",
    treeStableTimer=300,
    builderNames=["full-build"])

# Runs a quick test every night at 3:00
nightly_s = Nightly(
    name='nightly',
    builderNames=['nightly-test'],
    hour=3,
    minute=0,
    branch="default",
    onlyIfChanged=True)

# Runs a full test every Saturday at 8:00
weekend_s = Nightly(
    name='weekly',
    builderNames=['weekly-test'],
    dayOfWeek=5,
    hour=8,
    minute=0,
    branch="default",
    onlyIfChanged=True)

c['schedulers'] = [quick_s, full_s, nightly_s, weekend_s]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['slaves'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.


from buildbot.process import factory
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import Compile, SetProperty
from buildbot.steps.python_twisted import Trial



# Steps
base_repo_url = "http://hg.fast-downward.org/"

update_step = Mercurial(
    name="update",
    repourl=base_repo_url,
    mode="update",
    branchType="inrepo")
clobber_step = Mercurial(
    name="clobber",
    repourl=base_repo_url,
    mode="clobber",
    branchType="inrepo")
build_all_step  = Compile(
    name="build_all",
    command=["./build_all"],
    workdir="build/src"
    )
build_preprocess_step  = Compile(
    name="build_preprocess",
    command=["make"],
    workdir="build/src/preprocess"
    )
build_search_step  = Compile(
    name="build_search",
    command=["make", "all"],
    workdir="build/src/search"
    )
    
run_nightly_test_step = SetProperty(
    name="run_test",
    command=["./run-fd-test",
             "test-nightly",
             "CONFIG_NIGHTLY",
             "SUITE_NIGHTLY"],
    workdir="build/new-scripts")

run_weekly_test_step = SetProperty(
    name="run_test",
    command=["./run-fd-test",
             "test-weekly",
             "CONFIG_WEEKLY",
             "SUITE_WEEKLY"],
    workdir="build/new-scripts")


# Quick Factory                      
f_quick = factory.BuildFactory()
f_quick.useProgress = False

f_quick.addStep(update_step)
f_quick.addStep(build_all_step)

# Full Factory
f_full = factory.BuildFactory()

f_full.addStep(clobber_step)
f_full.addStep(build_preprocess_step)
f_full.addStep(build_search_step)

# Nightly Test Factory
f_nightly = factory.BuildFactory()

f_nightly.addStep(clobber_step)
f_nightly.addStep(build_preprocess_step)
f_nightly.addStep(build_search_step)
f_nightly.addStep(run_nightly_test_step)

# Weekly Test Factory
f_weekly = factory.BuildFactory()

f_weekly.addStep(clobber_step)
f_weekly.addStep(build_preprocess_step)
f_weekly.addStep(build_search_step)
f_weekly.addStep(run_weekly_test_step)



from buildbot.config import BuilderConfig
quick_build = BuilderConfig(
        name='quick-build',
        slavenames=['bot-erez'],
        factory=f_quick)
full_build = BuilderConfig(
        name='full-build',
        slavenames=['bot-erez'],
        factory=f_full)
nightly_test = BuilderConfig(
        name='nightly-test',
        slavenames=['bot-erez'],
        factory=f_nightly)
weekly_test = BuilderConfig(
        name='weekly-test',
        slavenames=['bot-erez'],
        factory=f_weekly)

c['builders'] = [quick_build, full_build, nightly_test, weekly_test]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import mail
mn = mail.MailNotifier(
    fromaddr="karpase@gmail.com",
    extraRecipients=['karpase@gmail.com', "helmert@informatik.uni-freiburg.de"],
    mode='failing')
c['status'].append(mn)




####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Fast Downward"
c['projectURL'] = "http://www.fast-downward.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.fast-downward.org/"
