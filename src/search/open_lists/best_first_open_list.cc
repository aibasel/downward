#include "best_first_open_list.h"

#include "../evaluator.h"
#include "../open_list.h"

#include "../plugins/plugin.h"
#include "../utils/memory.h"

#include <cassert>

using namespace std;

namespace standard_scalar_open_list {






template<class Entry>
void BestFirstOpenList<Entry>::do_insertion(
    EvaluationContext &eval_context, const Entry &entry) {
    int key = eval_context.get_evaluator_value(evaluator.get());
    buckets[key].push_back(entry);
    ++size;
}

template<class Entry>
Entry BestFirstOpenList<Entry>::remove_min() {
    assert(size > 0);
    auto it = buckets.begin();
    assert(it != buckets.end());
    Bucket &bucket = it->second;
    assert(!bucket.empty());
    Entry result = bucket.front();
    bucket.pop_front();
    if (bucket.empty())
        buckets.erase(it);
    --size;
    return result;
}

template<class Entry>
bool BestFirstOpenList<Entry>::empty() const {
    return size == 0;
}

template<class Entry>
void BestFirstOpenList<Entry>::clear() {
    buckets.clear();
    size = 0;
}

template<class Entry>
void BestFirstOpenList<Entry>::get_path_dependent_evaluators(
    set<Evaluator *> &evals) {
    evaluator->get_path_dependent_evaluators(evals);
}

template<class Entry>
bool BestFirstOpenList<Entry>::is_dead_end(
    EvaluationContext &eval_context) const {
    return eval_context.is_evaluator_value_infinite(evaluator.get());
}

template<class Entry>
bool BestFirstOpenList<Entry>::is_reliable_dead_end(
    EvaluationContext &eval_context) const {
    return is_dead_end(eval_context) && evaluator->dead_ends_are_reliable();
}

BestFirstOpenListFactory::BestFirstOpenListFactory(
    const plugins::Options &options)
    : options(options) {
}

BestFirstOpenListFactory::BestFirstOpenListFactory(bool pref_only, shared_ptr<Evaluator> evaluator)
: pref_only(pref_only), size(0),
evaluator(evaluator) {
}


unique_ptr<StateOpenList>
BestFirstOpenListFactory::create_state_open_list() {
    return utils::make_unique_ptr<BestFirstOpenList<StateOpenListEntry>>(options);
}

unique_ptr<EdgeOpenList>
BestFirstOpenListFactory::create_edge_open_list() {
    return utils::make_unique_ptr<BestFirstOpenList<EdgeOpenListEntry>>(options);
}

TaskIndependentBestFirstOpenListFactory::TaskIndependentBestFirstOpenListFactory(const plugins::Options &opts)
        : options(opts), size(0), pref_only(opts.get<bool>("pref_only")), evaluator(opts.get<std::shared_ptr<TaskIndependentEvaluator>>("eval")) {
}

TaskIndependentBestFirstOpenListFactory::TaskIndependentBestFirstOpenListFactory(
        bool pref_only, shared_ptr<TaskIndependentEvaluator> evaluator
)
        : pref_only(pref_only), size(0), evaluator(evaluator) {
}



std::unique_ptr<TaskIndependentStateOpenList>
TaskIndependentBestFirstOpenListFactory::create_task_independent_state_open_list() {
    return utils::make_unique_ptr<TaskIndependentBestFirstOpenList<StateOpenListEntry>>(pref_only, evaluator);
}

std::unique_ptr<TaskIndependentEdgeOpenList>
TaskIndependentBestFirstOpenListFactory::create_task_independent_edge_open_list() {
    return utils::make_unique_ptr<TaskIndependentBestFirstOpenList<EdgeOpenListEntry>>(pref_only, evaluator);
}


class BestFirstOpenListFeature : public plugins::TypedFeature<TaskIndependentOpenListFactory, TaskIndependentBestFirstOpenListFactory> {
public:
    BestFirstOpenListFeature() : TypedFeature("single") {
        document_title("Best-first open list");
        document_synopsis(
            "Open list that uses a single evaluator and FIFO tiebreaking.");

        add_option<shared_ptr<TaskIndependentEvaluator>>("eval", "evaluator");
        add_option<bool>(
            "pref_only",
            "insert only nodes generated by preferred operators", "false");

        document_note(
            "Implementation Notes",
            "Elements with the same evaluator value are stored in double-ended "
            "queues, called \"buckets\". The open list stores a map from evaluator "
            "values to buckets. Pushing and popping from a bucket runs in constant "
            "time. Therefore, inserting and removing an entry from the open list "
            "takes time O(log(n)), where n is the number of buckets.");
    }
    virtual shared_ptr<TaskIndependentBestFirstOpenListFactory> create_component(const plugins::Options &opts, const utils::Context &context) const override {
        plugins::verify_list_non_empty<shared_ptr<OpenListFactory>>(context, opts, "sublists");
        return make_shared<TaskIndependentBestFirstOpenListFactory>(opts.get<bool>("pref_only"),
                                                       opts.get<shared_ptr<TaskIndependentEvaluator>>("eval"));
    }
};

static plugins::FeaturePlugin<BestFirstOpenListFeature> _plugin;
}
